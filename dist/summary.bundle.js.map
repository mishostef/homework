{"version":3,"file":"summary.bundle.js","mappings":";;;;;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;;AAEA;AACP;AACA,mCAAmC;AACnC;AACA;AACA;AACO;AACP;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA,cAAc,IAAI,GAAG,MAAM;AAC3B;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA,eAAe,YAAY,GAAG,MAAM,GAAG,KAAK;AAC5C;;AAEO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK,GAAG,GAAG,GAAG,GAAG;AAChC;;AAEO;AACP;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA,qCAAqC,qBAAqB;AAC1D;AACA,UAAU;AACV;AACA;AACA;AACA,KAAK;;AAEL,sCAAsC;AACtC,wCAAwC;AACxC,gCAAgC;AAChC;AACA;AACA;;;;;;UCxFA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACNmD;AACL;AAC9C,yBAAyB,oDAAS;AAClC,0BAA0B,oDAAS;AACnC;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,CAAC;;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;;;AAGA;AACA;AACA;AACA,4BAA4B,qDAAc,WAAW,qDAAc;AACnE;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB,2DAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,6CAAE,SAAS;AAC9B;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,6CAAE,SAAS;AAClC;AACA;AACA;AACA;AACA;AACA,yBAAyB,6CAAE,WAAW,uBAAuB;AAC7D;AACA,UAAU;AACV;AACA;AACA;AACA,KAAK;AACL;AACA,C","sources":["webpack://budgeteer/./js/constants.js","webpack://budgeteer/./js/utils.js","webpack://budgeteer/webpack/bootstrap","webpack://budgeteer/webpack/runtime/define property getters","webpack://budgeteer/webpack/runtime/hasOwnProperty shorthand","webpack://budgeteer/webpack/runtime/make namespace object","webpack://budgeteer/./js/summary.js"],"sourcesContent":["export const bodyEmptyArr = (n)=>[\n    new Array(n).fill(0),//utils\n    new Array(n).fill(0),//groc\n    new Array(n).fill(0),//ent\n    new Array(n).fill(0),//trans\n    new Array(n).fill(0),//other\n    new Array(n).fill(0),//total\n];\nexport const footerEmptyArr = (n)=> [...Array(3)].map(e => Array(n).fill(0));","export const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\nexport const getId = () => ('00000000' + Math.random() * 99999999 | 0).toString().slice(-8);\n\nexport const getRecord = (lsKey) => {\n    const records = localStorage.getItem(lsKey);\n    if (!records || records === '{}') return new Map();\n    const values = JSON.parse(records);\n    return new Map(values);\n}\nexport const setRecord = (map, lsKey) => {\n    const entries = JSON.stringify([...map.entries()]);\n    localStorage.setItem(lsKey, entries);\n}\n\nexport function truncateDate(dateString) {\n    const date = new Date(dateString);\n    const day = date.getDate();\n    const month = months[date.getMonth()];\n    return `${day}.${month}`;\n}\n\nexport function validateData(name, amount) {\n    if (name.trim() === '') {\n        throw new Error('Name cannot be empty');\n    }\n    if (amount === '') {\n        throw new Error('Amount cannot be empty');\n    }\n    if (Number(amount) <= 0) {\n        throw new Error('Amount should be positive');\n    }\n}\n\nexport function convertDatestring(dateString) {\n    const currentYear = new Date().getFullYear();\n    const [d, monthIndex] = dateString.split('.');\n    const date = ('0' + d).slice(-2);\n    const month = ('0' + (months.indexOf(monthIndex) + 1)).slice(-2);\n    return (`${currentYear}-${month}-${date}`);\n}\n\nexport function getFormData(e) {\n    const formData = new FormData(e.target);\n    const data = (Object.fromEntries(formData));\n    return data;\n}\nexport function dateToString(date) {\n    const d = date.getDate();\n    const yyyy = date.getFullYear();\n    const monthIndex = months[date.getMonth() + 1];\n    const dd = ('0' + d).slice(-2);\n    const mm = ('0' + months.indexOf(monthIndex)).slice(-2);\n    return (`${yyyy}-${mm}-${dd}`);\n}\n\nexport function El(typeStr, attributesObj, ...content) {\n    const parent = document.createElement(typeStr);\n    for (let key in attributesObj) {\n        if (key.startsWith('on')) {\n            parent.addEventListener(key.slice(2), attributesObj[key]);\n        } else {\n            parent[key] = attributesObj[key];\n        }\n    }\n    for (let item of content) {\n        parent.append(item)\n    }\n    return parent;\n}\n\nexport function createTableRow(tabledataArray, indicesArray) {\n    const tr = document.createElement('tr');\n    tabledataArray.forEach((element, index) => {\n        const td = document.createElement('td');\n        if (indicesArray.includes(index)) {\n            const span = El('span', {className:'currency'}, element);\n            td.appendChild(span);\n        } else {\n            td.textContent = element;\n        }\n        tr.appendChild(td);\n    });\n\n    const buttonEdit = El('button', {}, 'Edit');\n    const buttonDelete = El('button', {}, 'Delete');\n    const buttonTD = El('td', {}, buttonEdit, buttonDelete);\n    tr.appendChild(buttonTD);\n    return tr;\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { getRecord, months, El } from \"./utils.js\";\nimport { bodyEmptyArr } from \"./constants.js\";\nconst budgetsArray = [...getRecord('budget').values()];\nconst expensesArray = [...getRecord('records').values()];\nconst categories = ['Utilities', 'Groceries', 'Entertainment', 'Transport', 'Other'];\nconst allDates = getAllDates(budgetsArray, expensesArray);\nallDates.sort(dateSort);\nconst sortedUniqueDates = [...new Set(allDates)];\nlet startIndex = 0;\n\nrender(startIndex, sortedUniqueDates);\n\nconst buttons = document.querySelectorAll('button.action');\nconst [previousButton, nextButton] = [...buttons];\n\n\npreviousButton.addEventListener('click', function (e) {\n    if (startIndex < 3) return;\n    startIndex -= 3;\n    render(startIndex, sortedUniqueDates);\n});\n\nnextButton.addEventListener('click', function (e) {\n    if (startIndex > sortedUniqueDates.length - 3) return;\n    startIndex += 3;\n    render(startIndex, sortedUniqueDates);\n});\n\n\nfunction getAllDates(budgetArr, expensesArr) {\n    const allDates = [];\n    expensesArr.forEach(exp => {\n        const dateArr = exp[0].split('.');\n        dateArr.shift();\n        const newDate = dateArr.join('.')\n        exp[0] = newDate;\n        allDates.push(newDate);\n    });\n    budgetArr.forEach(budget => {\n        const budgetDate = budget[0];\n        allDates.push(budgetDate);\n    });\n    return allDates;\n}\n\n\nfunction dateSort(dateString1, dateString2) {\n    const [month1, year1] = dateString1.split('.');\n    const [month2, year2] = dateString2.split('.');\n    return year1 - year2 || months.indexOf(month1) - months.indexOf(month2);\n}\n\n\nfunction getPeriod(sortedDates, startIndex = 0) {\n    return sortedDates.slice(startIndex, Math.min(sortedDates.length, startIndex + 3));\n}\n\nfunction dateToMonthConverter(dateArr) {\n    return dateArr.map(x => x.split('.')[0]);\n}\n\nfunction getBodyData(slicedDates, bodyDdata) {\n    const width = bodyDdata[0].length;\n    const height = bodyDdata.length;\n    let totalExpenses = 0;\n    expensesArray.forEach((exp) => {\n        const expDate = exp[0];\n        slicedDates.forEach((slicedDate, dateIndex) => {\n            if (slicedDate === expDate) {\n                const amount = Number(exp[3]);\n                const category = exp[2];\n                const categoryIndex = categories.indexOf(category);\n                bodyDdata[categoryIndex][dateIndex] += amount;\n                bodyDdata[categoryIndex][width - 1] += amount;\n                bodyDdata[height - 1][dateIndex] += amount;\n                totalExpenses += amount;\n            }\n        });\n    })\n    bodyDdata[height - 1][width - 1] = totalExpenses;\n    return bodyDdata;\n}\n\nfunction getFooterData(total, budgetArr, dates) {\n    const footerHeight = 3;\n    const footerWidth = total.length;\n    const footerArr = [...Array(footerHeight)].map(e => Array(footerWidth).fill(0));\n    footerArr[0] = total;\n    budgetArr.forEach((record) => {\n        const budgetDate = record[0];\n        dates.forEach((d, di) => {\n            if (d === budgetDate) {\n                const income = Number(record[1]);\n                const budget = Number(record[2]);\n                footerArr[1][di] += budget;\n                footerArr[2][di] += income;\n            }\n        });\n    });\n    for (let t = 0; t < total.length; t++) {\n        if (total[t] !== 0) {\n            footerArr[1][t] = -1 * Math.min(footerArr[1][t] - total[t], 0);\n            footerArr[2][t] = Math.max(footerArr[2][t] - total[t], 0);\n        }\n    }\n    return footerArr;\n}\n\nfunction render(startIndex, sortedUniqueDates) {\n    const slicedDates = getPeriod(sortedUniqueDates, startIndex);\n    const length = slicedDates.length;\n    const bodyDdata = bodyEmptyArr(length + 1);\n    const headerMonths = dateToMonthConverter(slicedDates);\n    const bodyData = getBodyData(slicedDates, bodyDdata);\n    const totalSpent = bodyData.pop();\n    const footerData = getFooterData(totalSpent, budgetsArray, slicedDates);\n    const t = document.getElementsByClassName('editor')[0];\n    const newBody = createTableBody(bodyData);\n    const body = t.querySelector('tbody');\n    const headers = t.querySelector('thead');\n    const newHeaders = createTableHeaders(['Category', ...headerMonths, 'Total']);\n    const footer = t.querySelector('tfoot');\n    const newFooter = createTableFooter(footerData);\n    t.replaceChild(newHeaders, headers);\n    t.replaceChild(newBody, body);\n    t.replaceChild(newFooter, footer);\n}\n\nfunction createTableFooter(footerData) {\n    const footer = document.createElement('tfoot');\n    const currencyIndices = [0, 1, 2, 3];\n    const totalSpent = createTableRow(footerData[0], currencyIndices, 'Total Spent');\n    totalSpent.classList.add('total');\n    const budgetOverruns = createTableRow(footerData[1], currencyIndices, 'Budget overruns');\n    budgetOverruns.classList.add('overrun');\n    const savings = createTableRow(footerData[2], currencyIndices, 'Savings');\n    savings.classList.add('savings');\n    footer.appendChild(totalSpent);\n    footer.appendChild(budgetOverruns)\n    footer.appendChild(savings);\n    return footer;\n}\n\nfunction createTableBody(tableData) {\n    const tbody = document.createElement('tbody');\n    tableData.forEach((tableRow, i) => {\n        const currencyIndices = [0, 1, 2, 3];\n        const row = createTableRow(tableRow, currencyIndices, categories[i]);\n        tbody.appendChild(row);\n    })\n    return tbody;\n}\n\nfunction createTableHeaders(headers) {\n    const thead = document.createElement('thead');\n    const row = document.createElement('tr');\n    headers.forEach(h => {\n        const td = El('td', {}, h);\n        row.appendChild(td);\n    })\n    thead.appendChild(row);\n    return thead;\n}\n\nfunction createTableRow(tabledataArray, indicesArray, th) {\n    const tr = document.createElement('tr');\n    if (th) {\n        const header = El('th', {}, th);\n        tr.appendChild(header);\n    }\n    tabledataArray.forEach((element, index) => {\n        const td = document.createElement('td');\n        if (indicesArray.includes(index)) {\n            const span = El('span', { className: 'currency' }, element);\n            td.appendChild(span);\n        } else {\n            td.textContent = element;\n        }\n        tr.appendChild(td);\n    });\n    return tr;\n}"],"names":[],"sourceRoot":""}