{"version":3,"file":"expenses.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAO;AACA;;AAEA;AACP;AACA,mCAAmC;AACnC;AACA;AACA;AACO;AACP;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA,cAAc,IAAI,GAAG,MAAM;AAC3B;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA,eAAe,YAAY,GAAG,MAAM,GAAG,KAAK;AAC5C;;AAEO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK,GAAG,GAAG,GAAG,GAAG;AAChC;;AAEO;AACP;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA,qCAAqC,qBAAqB;AAC1D;AACA,UAAU;AACV;AACA;AACA;AACA,KAAK;;AAEL,sCAAsC;AACtC,wCAAwC;AACxC,gCAAgC;AAChC;AACA;AACA;;;;;;UCxFA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACHoB;;;AAGpB,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,wDAAwD,4DAAiB;AACzE;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0DAA0D,yDAAc;AACxE;AACA;AACA;AACA,iBAAiB,sDAAW;AAC5B;AACA;AACA,wDAAwD,uDAAY;AACpE;AACA;AACA,QAAQ,uDAAY;AACpB,MAAM;AACN;AACA;AACA;AACA,eAAe,gDAAK;AACpB;AACA;AACA,wBAAwB,eAAe,GAAG,kCAAkC;AAC5E;AACA;AACA,gBAAgB,yDAAc;AAC9B;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,CAAC;;AAED;AACA,YAAY,uDAAY;AACxB,C","sources":["webpack://budgeteer/./js/utils.js","webpack://budgeteer/webpack/bootstrap","webpack://budgeteer/webpack/runtime/define property getters","webpack://budgeteer/webpack/runtime/hasOwnProperty shorthand","webpack://budgeteer/webpack/runtime/make namespace object","webpack://budgeteer/./js/expenses.js"],"sourcesContent":["export const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\nexport const getId = () => ('00000000' + Math.random() * 99999999 | 0).toString().slice(-8);\n\nexport const getRecord = (lsKey) => {\n    const records = localStorage.getItem(lsKey);\n    if (!records || records === '{}') return new Map();\n    const values = JSON.parse(records);\n    return new Map(values);\n}\nexport const setRecord = (map, lsKey) => {\n    const entries = JSON.stringify([...map.entries()]);\n    localStorage.setItem(lsKey, entries);\n}\n\nexport function truncateDate(dateString) {\n    const date = new Date(dateString);\n    const day = date.getDate();\n    const month = months[date.getMonth()];\n    return `${day}.${month}`;\n}\n\nexport function validateData(name, amount) {\n    if (name.trim() === '') {\n        throw new Error('Name cannot be empty');\n    }\n    if (amount === '') {\n        throw new Error('Amount cannot be empty');\n    }\n    if (Number(amount) <= 0) {\n        throw new Error('Amount should be positive');\n    }\n}\n\nexport function convertDatestring(dateString) {\n    const currentYear = new Date().getFullYear();\n    const [d, monthIndex] = dateString.split('.');\n    const date = ('0' + d).slice(-2);\n    const month = ('0' + (months.indexOf(monthIndex) + 1)).slice(-2);\n    return (`${currentYear}-${month}-${date}`);\n}\n\nexport function getFormData(e) {\n    const formData = new FormData(e.target);\n    const data = (Object.fromEntries(formData));\n    return data;\n}\nexport function dateToString(date) {\n    const d = date.getDate();\n    const yyyy = date.getFullYear();\n    const monthIndex = months[date.getMonth() + 1];\n    const dd = ('0' + d).slice(-2);\n    const mm = ('0' + months.indexOf(monthIndex)).slice(-2);\n    return (`${yyyy}-${mm}-${dd}`);\n}\n\nexport function El(typeStr, attributesObj, ...content) {\n    const parent = document.createElement(typeStr);\n    for (let key in attributesObj) {\n        if (key.startsWith('on')) {\n            parent.addEventListener(key.slice(2), attributesObj[key]);\n        } else {\n            parent[key] = attributesObj[key];\n        }\n    }\n    for (let item of content) {\n        parent.append(item)\n    }\n    return parent;\n}\n\nexport function createTableRow(tabledataArray, indicesArray) {\n    const tr = document.createElement('tr');\n    tabledataArray.forEach((element, index) => {\n        const td = document.createElement('td');\n        if (indicesArray.includes(index)) {\n            const span = El('span', {className:'currency'}, element);\n            td.appendChild(span);\n        } else {\n            td.textContent = element;\n        }\n        tr.appendChild(td);\n    });\n\n    const buttonEdit = El('button', {}, 'Edit');\n    const buttonDelete = El('button', {}, 'Delete');\n    const buttonTD = El('td', {}, buttonEdit, buttonDelete);\n    tr.appendChild(buttonTD);\n    return tr;\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import {\n    truncateDate, getId, validateData, convertDatestring,\n    getFormData, dateToString, createTableRow\n} from \"./utils.js\";\n\n\nconst categories = { \"Other\": 0, \"Utilities\": 1, \"Groceries\": 2, \"Entertainment\": 3, \"Transport\": 4 }\nconst expensesTable = document.getElementsByClassName('editor')[0];\nlet rowToReplace = null;\n\nexpensesTable.addEventListener('click', function (e) {\n    const buttonText = e.target.textContent;\n    const row = e.target.parentElement.parentElement;\n    if (buttonText === 'Delete') {\n        row.remove();\n    } else {\n        const [date, name, category, amount] = [...row.children].slice(0, 4).map(x => x.textContent);\n        document.querySelector('[name=\"date\"]').value = convertDatestring(date);\n        document.querySelector('[name=\"name\"]').value = name;\n        document.querySelector('[name=\"category\"]').value = categories[category];\n        document.querySelector('[name=\"amount\"]').value = amount;\n        rowToReplace = row;\n    }\n})\n\nconst expensesForm = document.getElementById('new-expense');\n\nconst getExpenses = () => {\n    const records = localStorage.getItem('records');\n    if (!records || records === '{}') return new Map();\n    const values = JSON.parse(records);\n    return new Map(values);\n}\nconst setExpenses = (map) => {\n    const entries = JSON.stringify([...map.entries()]);\n    localStorage.setItem('records', entries);\n}\nconst records = getExpenses();\n\nhydrate()\nfunction hydrate() {\n    const tbody = document.getElementsByTagName('tbody')[0];\n    tbody.replaceChildren(...[...records.values()].map(x=>createTableRow(x,[3])));\n}\nexpensesForm.addEventListener('submit', (e) => {\n    e.preventDefault();\n    const data = getFormData(e);\n    if (!data.date) {\n        data.date = new Date();\n        document.querySelector('[name=\"date\"]').value = dateToString(new Date());\n    }\n    try {\n        validateData(data.name, data.amount)\n    } catch (err) {\n        alert(err.message)\n        return;\n    }\n    const id = getId();\n    const rowData = parseExpensesData(data);\n    const storageData = rowData.slice();\n    storageData[0] = `${storageData[0]}.${new Date(data.date).getFullYear()}`;\n    records.set(id, storageData);\n    setExpenses(records);\n    const row = createTableRow(rowData, [3]);\n    if (rowToReplace) {\n        expensesTable.querySelector('tbody').replaceChild(row, rowToReplace);\n        rowToReplace = null;\n    } else {\n        expensesTable.querySelector('tbody').appendChild(row);\n    }\n})\n\nfunction parseExpensesData(data) {\n    return [truncateDate(data.date), data.name, Object.keys(categories)[+data.category], data.amount];\n}"],"names":[],"sourceRoot":""}