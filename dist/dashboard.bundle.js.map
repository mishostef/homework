{"version":3,"file":"dashboard.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAO;AACA;;AAEA;AACP;AACA,mCAAmC;AACnC;AACA;AACA;AACO;AACP;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA,cAAc,IAAI,GAAG,MAAM;AAC3B;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA,eAAe,YAAY,GAAG,MAAM,GAAG,KAAK;AAC5C;;AAEO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK,GAAG,GAAG,GAAG,GAAG;AAChC;;AAEO;AACP;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA,qCAAqC,qBAAqB;AAC1D;AACA,UAAU;AACV;AACA;AACA;AACA,KAAK;;AAEL,sCAAsC;AACtC,wCAAwC;AACxC,gCAAgC;AAChC;AACA;AACA;;;;;;UCxFA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACN2C;AAC3C,yBAAyB,oDAAS;AAClC,0BAA0B,oDAAS;AACnC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,gBAAgB,6CAAE,WAAW,kBAAkB;AAC/C,yBAAyB,2BAA2B;AACpD,mBAAmB,6CAAE,UAAU,sBAAsB;AACrD,QAAQ,6CAAE,WAAW,wBAAwB;AAC7C,QAAQ,6CAAE,WAAW,wBAAwB;AAC7C,QAAQ,6CAAE,UAAU,uBAAuB;AAC3C;AACA;AACA,C","sources":["webpack://budgeteer/./js/utils.js","webpack://budgeteer/webpack/bootstrap","webpack://budgeteer/webpack/runtime/define property getters","webpack://budgeteer/webpack/runtime/hasOwnProperty shorthand","webpack://budgeteer/webpack/runtime/make namespace object","webpack://budgeteer/./js/dashboard.js"],"sourcesContent":["export const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\nexport const getId = () => ('00000000' + Math.random() * 99999999 | 0).toString().slice(-8);\n\nexport const getRecord = (lsKey) => {\n    const records = localStorage.getItem(lsKey);\n    if (!records || records === '{}') return new Map();\n    const values = JSON.parse(records);\n    return new Map(values);\n}\nexport const setRecord = (map, lsKey) => {\n    const entries = JSON.stringify([...map.entries()]);\n    localStorage.setItem(lsKey, entries);\n}\n\nexport function truncateDate(dateString) {\n    const date = new Date(dateString);\n    const day = date.getDate();\n    const month = months[date.getMonth()];\n    return `${day}.${month}`;\n}\n\nexport function validateData(name, amount) {\n    if (name.trim() === '') {\n        throw new Error('Name cannot be empty');\n    }\n    if (amount === '') {\n        throw new Error('Amount cannot be empty');\n    }\n    if (Number(amount) <= 0) {\n        throw new Error('Amount should be positive');\n    }\n}\n\nexport function convertDatestring(dateString) {\n    const currentYear = new Date().getFullYear();\n    const [d, monthIndex] = dateString.split('.');\n    const date = ('0' + d).slice(-2);\n    const month = ('0' + (months.indexOf(monthIndex) + 1)).slice(-2);\n    return (`${currentYear}-${month}-${date}`);\n}\n\nexport function getFormData(e) {\n    const formData = new FormData(e.target);\n    const data = (Object.fromEntries(formData));\n    return data;\n}\nexport function dateToString(date) {\n    const d = date.getDate();\n    const yyyy = date.getFullYear();\n    const monthIndex = months[date.getMonth() + 1];\n    const dd = ('0' + d).slice(-2);\n    const mm = ('0' + months.indexOf(monthIndex)).slice(-2);\n    return (`${yyyy}-${mm}-${dd}`);\n}\n\nexport function El(typeStr, attributesObj, ...content) {\n    const parent = document.createElement(typeStr);\n    for (let key in attributesObj) {\n        if (key.startsWith('on')) {\n            parent.addEventListener(key.slice(2), attributesObj[key]);\n        } else {\n            parent[key] = attributesObj[key];\n        }\n    }\n    for (let item of content) {\n        parent.append(item)\n    }\n    return parent;\n}\n\nexport function createTableRow(tabledataArray, indicesArray) {\n    const tr = document.createElement('tr');\n    tabledataArray.forEach((element, index) => {\n        const td = document.createElement('td');\n        if (indicesArray.includes(index)) {\n            const span = El('span', {className:'currency'}, element);\n            td.appendChild(span);\n        } else {\n            td.textContent = element;\n        }\n        tr.appendChild(td);\n    });\n\n    const buttonEdit = El('button', {}, 'Edit');\n    const buttonDelete = El('button', {}, 'Delete');\n    const buttonTD = El('td', {}, buttonEdit, buttonDelete);\n    tr.appendChild(buttonTD);\n    return tr;\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { El, getRecord } from \"./utils.js\";\nconst budgetsArray = [...getRecord('budget').values()];\nconst expensesArray = [...getRecord('records').values()];\nconst budgetsums = getBugetSums(budgetsArray);\nconst expenses = getBreakdown(expensesArray);\nconst maxExpense = Math.max(...Object.values(expenses));\n\nconst spent = expenses.Total;\nconst remaining = Math.max(budgetsums.budget - spent, 0);\nconst savings = Math.max(budgetsums.income - spent, 0);\nsetRowValues(spent, remaining, savings);\nresizeBarChart(expenses);\nresizeSummaryColumn(spent, remaining, savings);\n\nfunction resizeBarChart(expenses) {\n    const rows = Object.entries(expenses).map(([name, value]) => createSummaryRow(name, value, maxExpense));\n    document.querySelector('.breakdown').replaceChildren(...rows);\n}\n\nfunction resizeSummaryColumn(spent, remaining, savings) {\n    const summaryColumn = document.getElementsByClassName('right-col')[0];\n    [...summaryColumn.children].forEach(x => x.style.height *= 300 / Math.max(spent, remaining, savings));\n}\n\nfunction setRowValues(spent, remaining, savings) {\n    const arr = [spent, remaining, savings, ...Object.values(expenses)];\n    [...document.querySelectorAll('.cat-row span.row.value')].forEach((x, i) => x.textContent = arr[i] | 0);\n}\n\nfunction getBugetSums(budgetsArray) {\n    let income = 0;\n    let budget = 0;\n    budgetsArray.forEach(record => {\n        income += Number(record[1]);\n        budget += Number(record[2]);\n    });\n    return { income, budget };\n}\n\nfunction getBreakdown(expensesArray) {\n    const expenses = {\n        Utilities: 0, Groceries: 0,\n        Entertainment: 0, Transport: 0, Other: 0, Total: 0\n    };\n    expensesArray.forEach(expense => {\n        const category = expense[2];\n        const spent = Number(expense[3]);\n        expenses[category] += spent;\n        expenses.Total += spent;\n    })\n    return expenses;\n}\n\nfunction createSummaryRow(name, value, maxValue) {\n    const bar = El('span', { className: 'bar' });\n    bar.style.width = `${value / maxValue * 400 | 0}px`;\n    const result = El('div', { className: 'cat-row' },\n        El('span', { className: 'row label' }, name),\n        El('span', { className: 'row value' }, value),\n        El('div', { className: 'bar-area' }, bar),\n    );\n    return result;\n}"],"names":[],"sourceRoot":""}